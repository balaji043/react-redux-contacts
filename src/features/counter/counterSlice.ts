import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchCount } from './counterAPI';

export interface CounterState {
	value: number;
	status: 'idle' | 'loading' | 'failed';
	incrementAmount: number;
}

const initialState: CounterState = {
	value: 0,
	status: 'idle',
	incrementAmount: 2,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk<
	number,
	any,
	{ state: RootState }
>('counter/fetchCount', async (_, payloadCreator) => {
	const state = payloadCreator.getState();
  const incrementAmount = selectIncrementValue(state)
	const response = await fetchCount(incrementAmount);
	// The value we return becomes the `fulfilled` action payload
	return response.data;
});

export const counterSlice = createSlice({
	name: 'counter',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		increment: (state) => {
			// Redux Toolkit allows us to write "mutating" logic in reducers. It
			// doesn't actually mutate the state because it uses the Immer library,
			// which detects changes to a "draft state" and produces a brand new
			// immutable state based off those changes
			state.value += 1;
		},
		decrement: (state) => {
			state.value -= 1;
		},
		// Use the PayloadAction type to declare the contents of `action.payload`
		incrementByAmount: (state) => {
			state.value += state.incrementAmount;
		},
		setIncrementAmount: (state, action: PayloadAction<number>) => {
			state.incrementAmount = action.payload;
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(incrementAsync.pending, (state) => {
				state.status = 'loading';
			})
			.addCase(incrementAsync.fulfilled, (state, action) => {
				state.status = 'idle';
				state.value += action.payload;
			});
	},
});

export const { increment, decrement, incrementByAmount, setIncrementAmount } =
	counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;
export const selectIncrementValue = (state: RootState) =>
	state.counter.incrementAmount;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (): AppThunk => (dispatch, getState) => {
	const currentValue = selectCount(getState());
	if (currentValue % 2 === 1) {
		dispatch(incrementByAmount());
	}
};

export default counterSlice.reducer;
